from aiogram import Bot, Dispatcher, executor
import keyboards
from bot_functions import AnimeBot, content_to_html

TOKEN = '1410462743:AAHmabWssHSalBRNIQhQeGpFRqGX6aw7jWo'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

BOT_FUNCTIONS = AnimeBot()


class IsSerial:
    # Check user choice - Serials or Films
    bol = True


@dp.message_handler(commands=['start'])
async def send_welcome(message,
                       message_text='–ü—Ä–∏–≤–µ—Ç \n' \
                                    '–Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –∞–Ω–∏–º–µ))\n\n' \
                                    '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏ /help'):
    """
    Welcome function
    :param message_text: This text will be in bot`s message
    :param message: message like in commands
    """
    chat_id = message.from_user.id
    await bot.send_message(chat_id=chat_id, text=message_text, reply_markup=keyboards.StartKeyboard.keyboard)


@dp.message_handler(lambda message: message.text == f'‚¨Ö –ù–∞–∑–∞–¥')
async def back_to_start(message):
    """
    Returns user to the start keyboard
    """
    message_text = '–•–æ—Ä–æ—à–æ'
    await send_welcome(message, message_text)


@dp.message_handler(lambda message: message.text in ['–ê–Ω–∏–º–µ —Å–µ—Ä–∏–∞–ª—ã', '–ê–Ω–∏–º–µ —Ñ–∏–ª—å–º—ã'])
async def choose_media(message):
    """
    Choosing media function
    :param message:
    :return:
    """
    message_text = '–•–æ—Ä–æ—à–æ, –Ω–æ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å?'
    chat_id = message.from_user.id

    if message.text == '–ê–Ω–∏–º–µ —Å–µ—Ä–∏–∞–ª—ã':
        IsSerial.bol = True
        reply_markup = keyboards.SerialsKeyboard.keyboard
    else:
        IsSerial.bol = False
        reply_markup = keyboards.FilmsKeyboard.keyboard

    await bot.send_message(chat_id=chat_id, text=message_text, reply_markup=reply_markup)


@dp.message_handler(lambda message: message.text in ['–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º', '–°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª'])
async def random_anime(message):
    # Send random anime to user
    chat_id = message.from_user.id

    if message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª':
        content = BOT_FUNCTIONS.choose_random('SERIALS')
    else:
        content = BOT_FUNCTIONS.choose_random('FILMS')

    message_text = content_to_html(content)

    await bot.send_message(chat_id=chat_id, text=message_text, parse_mode='html', disable_web_page_preview=False)


@dp.message_handler(lambda message: message.text in ['–°–µ—Ä–∏–∞–ª—ã –ø–æ –∂–∞–Ω—Ä–∞–º', '–§–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä–∞–º'])
async def media_genres_keyboard(message):
    # Reply genre keyboard

    message_text = '–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫–æ–π –∂–∞–Ω—Ä —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?'
    chat_id = message.from_user.id

    if message.text == '–°–µ—Ä–∏–∞–ª—ã –ø–æ –∂–∞–Ω—Ä–∞–º':
        reply_keyboard = keyboards.SerialsGenresKeyboard.keyboard
    else:
        reply_keyboard = keyboards.FilmsGenresKeyboard.keyboard

    await bot.send_message(chat_id=chat_id, text=message_text, reply_markup=reply_keyboard)


@dp.message_handler(lambda message: message.text in ['–ù–∞–∑–∞–¥ –∫ –∞–Ω–∏–º–µ —Å–µ—Ä–∏–∞–ª–∞–º', '–ù–∞–∑–∞–¥ –∫ –∞–Ω–∏–º–µ —Ñ–∏–ª—å–º–∞–º'])
async def back_to_media_keyboard(message):
    chat_id = message.from_user.id
    message_text = 'üëá–í–µ—Ä–Ω—É–ª–∏—Å—å, —á—Ç–æ –¥–∞–ª—å—à–µ?üëá'
    if message.text == '–ù–∞–∑–∞–¥ –∫ –∞–Ω–∏–º–µ —Å–µ—Ä–∏–∞–ª–∞–º':
        reply_markup = keyboards.SerialsKeyboard.keyboard
    else:
        reply_markup = keyboards.FilmsKeyboard.keyboard

    await bot.send_message(chat_id=chat_id, text=message_text, reply_markup=reply_markup)


@dp.message_handler(lambda message: message.text in ['–ë–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–í–æ–π–Ω–∞', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–î—Ä–∞–º–∞', '–°—ë–¥–∑—ë',
                                                     '–°—ë–Ω–µ–Ω', '–ö–∏–±–µ—Ä–ø–∞–Ω–∫', '–ú–µ—Ö–∞', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ò—Å—Ç–æ—Ä–∏—è',
                                                     '–ú–∏—Å—Ç–∏–∫–∞', '–§—ç–Ω—Ç–µ–∑–∏', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å', '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π',
                                                     '–†–æ–º–∞–Ω—Ç–∏–∫–∞', '–ö–æ–º–µ–¥–∏–∏', '–°–ø–æ—Ä—Ç', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
                                                     '–¢—Ä–∏–ª–ª–µ—Ä', '–£–∂–∞—Å—ã', '–®–∫–æ–ª–∞'])
async def random_genre(message):
    # Reply random serial, but user choose genre
    chat_id = message.from_user.id
    if IsSerial.bol:
        content = BOT_FUNCTIONS.choose_random_by_genre(media='SERIALS', genre=message.text)
    else:
        content = BOT_FUNCTIONS.choose_random_by_genre(media='FILMS', genre=message.text)

    message_text = 'üëá–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–π—Ç–ª —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞üëá\n'
    message_text += content_to_html(content)

    await bot.send_message(chat_id=chat_id, text=message_text, parse_mode='markdown', disable_web_page_preview=False)


@dp.message_handler(lambda message: message.text in ['–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤', '–¢–æ–ø —Å–µ—Ä–∏–∞–ª–æ–≤'])
async def top_media(message):
    # Need refactoring
    chat_id = message.from_user.id

    if message.text == '–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤':
        content = BOT_FUNCTIONS.choose_top10('FILMS')
    else:
        content = BOT_FUNCTIONS.choose_top10('SERIALS')

    message_text = ''
    for anime in content:
        message_text += f'<a href=\'{anime["link"]}\'>{anime["name"]}</a>\n'

    await bot.send_message(chat_id=chat_id, text=message_text, parse_mode='html', disable_web_page_preview=True)


@dp.message_handler(lambda message: message.text == '–û–Ω–≥–æ–∏–Ω–≥–∏')
async def ongoins(message):
    # Need refactoring
    chat_id = message.from_user.id
    content = BOT_FUNCTIONS.select_ongoins()
    message_text = ''
    for anime in content:
        message_text += f'<a href=\'{anime["link"]}\'>{anime["name"]}</a>\n'
    await bot.send_message(chat_id=chat_id ,text=message_text, parse_mode='html', disable_web_page_preview=True)

@dp.message_handler()
async def other_text_to_search(message):
    #Need refactoring

    chat_id = message.from_user.id
    content = BOT_FUNCTIONS.find_by_name(message.text)

    if isinstance(content, list):
        message_text = ''
        for anime in content:
            message_text += f'<a href=\'{anime["link"]}\'>{anime["name"]}</a>\n'
    else:
        message_text = content

    await bot.send_message(chat_id=chat_id, text=message_text, parse_mode='html', disable_web_page_preview=True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
